openapi: 3.1.0
info:
  title: Travel plan API
  version: 1.0.0
host: localhost:8000
basePath: /
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Auth
    description: APIs related to authentication
  - name: Plan
    description: APIs for managing plans
paths:
  /auth/google:
    get:
      summary: Authenticate with Google
      tags: [Auth]
      description: Redirects to Google for authentication, asking for profile and email permissions.
      responses:
        '302':
          description: Redirect to Google's OAuth consent screen.
  /auth/facebook:
    get:
      summary: Authenticate with Facebook
      tags: [Auth]
      description: Redirects to Facebook for authentication, asking for public profile and email permissions.
      responses:
        '302':
          description: Redirect to Facebook's OAuth consent screen.
  /auth/me:
    get:
      summary: Retrieves the details of the current user.
      tags: [Auth]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: The details of the current user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized, the user is not logged in.
  /plan/same-query-check:
    post:
      summary: Checks if the new query matches the latest one
      tags: [Plan]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - hotelLocation
                - days
                - transportation
                - city
                - nation
                - placeOfInterest
                - foodCategories
              properties:
                hotelLocation:
                  type: string
                days:
                  type: integer
                  minimum: 2
                  maximum: 7
                transportation:
                  type: string
                  enum: [PUBLIC, PRIVATE]
                city:
                  type: string
                nation:
                  type: string
                placeOfInterest:
                  type: array
                  items:
                    type: string
                foodCategories:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Boolean indicating if the new query matches the latest one
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Missing required fields or invalid inputs
        '401':
          description: Unauthorized
  /plan/latest:
    get:
      summary: Get the latest plan of the current user
      tags: [Plan]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: The latest plan was returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '401':
          description: No authorization or user not found.
        '500':
          description: Unexpected error.
  /plan/new:
    post:
      summary: Create a new travel plan
      tags: [Plan]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - hotelLocation
                - days
                - transportation
                - city
                - nation
                - placeOfInterest
                - foodCategories
              properties:
                hotelLocation:
                  type: string
                days:
                  type: integer
                  minimum: 2
                  maximum: 7
                transportation:
                  type: string
                  enum: [PUBLIC, PRIVATE]
                city:
                  type: string
                nation:
                  type: string
                placeOfInterest:
                  type: array
                  items:
                    type: string
                foodCategories:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: The created travel plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '400':
          description: Missing required fields or invalid inputs
        '401':
          description: Unauthorized  
components:
  securitySchemes:
    BearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    User:
      type: object
      required:
        - name
        - email
      properties:
        _id:
          type: string
          format: objectId
          description: MongoDB ObjectId
          readOnly: true
        name:
          type: string
          description: Name of the user
          example: "John Doe"
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john.doe@example.com"
        photo:
          type: string
          format: uri
          description: URL of the user's photo
          example: "http://example.com/photo.jpg"
          nullable: true
        providers:
          type: array
          description: List of user's OAuth providers
          items:
            type: object
            properties:
              provider:
                type: string
                description: Name of the OAuth provider
                example: "Google"
              userId:
                type: string
                description: User ID from the OAuth provider
                example: "user-id-from-provider"
        admin:
          type: boolean
          description: Indicates if the user is an admin
          default: false
          example: false
        plans:
          type: array
          items:
            type: string
            format: objectId
            description: MongoDB ObjectId referencing the 'Plan' model
          description: List of plans associated with the user
        createdAt:
          type: string
          format: date-time
          description: Date and time when the user was created
          readOnly: true
          example: "2023-07-31T10:20:30Z"
        updatedAt:
          type: string
          format: date-time
          description: Date and time when the user was last updated
          nullable: true
          example: "2023-07-31T10:20:30Z"
    Plan:
      type: object
      required:
        - name
        - user
      properties:
        _id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: "A trip to New York"
        user:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        query:
          $ref: '#/components/schemas/PlanQuery'
        userPrompt:
          type: string
          example: Plan a 3-day trip to Tokyo, Japan, focusing on nature landscapes and museums. The hotel is located in the Shinjuku area. I prefer seafood for meals and want to use public transportation only.
        gptResponse:
          $ref: '#/components/schemas/GptResponse'
    PlanQuery:
      type: object
      required:
        - days
        - hotelLocation
        - transportation
        - city
        - nation
        - placeOfInterest
        - foodCategories
      properties:
        days:
          type: integer
          example: 3
        hotelLocation:
          type: string
          example: "123 Main St, New York"
        transportation:
          type: string
          enum: [ 'TRAIN', 'WALK', 'DRIVE' ]
        city:
          type: string
          example: "New York"
        nation:
          type: string
          example: "USA"
        placeOfInterest:
          type: array
          items:
            type: string
        foodCategories:
          type: array
          items:
            type: string
    GptResponse:
      type: object
      required:
        - name
        - hotelLocation
        - itinerary
      properties:
        name:
          type: string
          example: "My trip to New York"
        hotelLocation:
          type: string
          example: "123 Main St, New York"
        itinerary:
          type: array
          items:
            $ref: '#/components/schemas/Itinerary'
    Itinerary:
      type: object
      required:
        - day
        - date
        - events
      properties:
        day:
          type: integer
          example: 1
        date:
          type: integer
          example: 1627947600
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Event:
      type: object
      required:
        - id
        - startAt
        - endAt
        - description
        - type
        - location
        - transportation
      properties:
        id:
          type: integer
          example: 1
        startAt:
          type: integer
          example: 1627947600
        endAt:
          type: integer
          example: 1627951200
        description:
          type: string
          example: "Visit the Statue of Liberty"
        type:
          type: string
          enum: [ 'ACTIVITY', 'MEAL' ]
        location:
          type: string
          example: "Statue of Liberty, New York"
        transportation:
          type: array
          items:
            $ref: '#/components/schemas/Transportation'
    Transportation:
      type: object
      required:
        - type
        - duration
        - from
        - to
      properties:
        type:
          type: string
          enum: [ 'TRAIN', 'WALK', 'DRIVE' ]
        duration:
          type: integer
          example: 30
        from:
          type: string
          example: "123 Main St, New York"
        to:
          type: string
          example: "Statue of Liberty, New York"
